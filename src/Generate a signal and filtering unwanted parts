# %%
#Apllying a filter on a sinusoidal signal with  noise at 8000 Hz and retrieving the pure sinusoidal tone of the sum of sin waves 10 Hz and 20 Hz 
import numpy as np
from numpy import logspace
import matplotlib as plt
from scipy import signal

def generate_random_signal():
    t= np.linspace(0, 1, 44000, False) # 1 sec
    f0= 10
    sig = 2* np.sin(2*np.pi*f0*t) + 3* np.sin(2*np.pi*2*f0*t) + 8* np.sin(2*np.pi*800*f0*t)           #np.random.rand(t.shape[0]
    return (t, sig)
t, sig = generate_random_signal()
sos = signal.butter(N = 10, Wn = 3250, btype = 'lp', fs = 44000, output = 'sos')
filtered = signal.sosfilt(sos, sig)
fig, (ax1, ax2) = plt.subplots( 2, 1, sharex=True)
fig.suptitle('Filtering of signal with f1 = 10 [Hz], f2 = 20 [Hz] ')
ax1.plot(t, sig)
ax1.set_title('10 and 20 Hz sinusoids with 8kHz interferences')
ax1.axis([0, 1, -15, 15])
ax2.plot(t, filtered)
ax2.set_title('After Filtering the 8kHz')
ax2.axis([0, 1, -5, 5])
ax2.set_xlabel('Time [seconds]')
plt.tight_layout()
plt.show()

sos_lp_2=signal.butter(N = 10, Wn = 15, btype = 'lowpass', fs = 44000, output = 'sos')
sos_hp_2=signal.butter(N = 10, Wn = 15, btype = 'highpass', fs = 44000, output = 'sos')
filtered_lp_2= signal.sosfilt(sos_lp_2, filtered)
filtered_hp_2= signal.sosfilt(sos_hp_2,filtered)
fig, (ax1, ax2) = plt.subplots( 2, 1, sharex=True)
fig.suptitle('Filtering of signal with f1 = 10 [Hz], f2 = 20 [Hz] ')
ax1.plot(t, filtered)
ax1.set_title('filtered signal of 10 and 20 Hz sinusoids')
ax1.axis([0, 1, -5, 5])
ax2.plot(t, filtered_lp_2, label='10 Hz')
ax2.plot(t,filtered_hp_2, label=('20 Hz'))

ax2.axis([0, 1, -4, 4])
ax2.set_xlabel('Time [seconds]')
plt.tight_layout()
plt.legend(bbox_to_anchor =(0.70, 1.15), ncol = 2 )
plt.show()

# %%
# Power Spectrum / signal.welch
fs = 44000
f, Pxx_spec = signal.welch(sig, fs, window ='flattop', nperseg = 1024, scaling = 'spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlim(0, 10000)

plt.xlabel('Frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.title('Power spectrum before filter is applied')
plt.show()

# %%
#filtered signal Power Spectrum
fs = 44000
f, Pxx_spec = signal.welch(filtered, fs, window ='flattop', nperseg = 1024, scaling= 'spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlim(0,10000)
plt.xlabel ('Frequency [Hz]')
plt.ylabel ('Linear Spectrum [V RMS]')
plt.title (' Power spectrum of a Butterworth filter 20th order with cutoff frequency at 3250')
plt.show ()

#%%

# simulation of the system response to the butterworth filter used to eliminate noise
from scipy.signal import lsim
b, a = signal.butter(N=20, Wn=2*np.pi*3250, btype='lowpass',fs=44800, analog=False)
tout, yout, xout = lsim((b, a), U=sig, T=t)
plt.plot (t, sig, 'r', alpha=0.5, linewidth=1, label='input')
plt.plot (tout, yout, 'k', linewidth=0.05, label='output')
plt.legend (loc='best', shadow=True, framealpha=1)
plt.grid (alpha=0.3)
plt.xlabel ('time')
plt.show ()

# %%
# Fast Fourier Transformation of input and output signals 
f0=10
N = int(10*(fs/f0))   

yf_input = np.fft.rfft(sig) 
y_input_mag_plot = np.abs(yf_input)/N


f= np.linspace (0, (N-1)*(fs/N),N )

f_plot = f[0:int(N/2+1)]
y_input_mag_plot = 2*y_input_mag_plot[0:int(N/2+1)]
y_input_mag_plot[0] = y_input_mag_plot[0] / 2

fig, (ax1, ax2) = plt.subplots(2,1, sharex=True)
fig.suptitle('Frequency domain of the original signal and filtered(below)')
ax1.plot(f_plot, y_input_mag_plot)
ax1.grid(alpha=0.3)

ax1.set_ylabel('Amplitute [dB]')

yf_output = np.fft.rfft(filtered)
y_output_mag_plot = np.abs(yf_output)/N
y_output_mag_plot = 2* y_output_mag_plot[0:int(N/2+1)]
y_output_mag_plot[0]= y_output_mag_plot[0]/2  
ax2.plot(f_plot, y_output_mag_plot)

plt.plot(f_plot, y_output_mag_plot)
plt.grid(alpha=0.3)
plt.xlabel('Frequency [Hz]')
plt.ylabel('Amplitute [dB]')
plt.xscale('log')

plt.show()



# %%
#Bode plot for input and output
# needs more work for proper implementation
H= yf_output/ yf_input
Y = np.imag (H)
X = np.real (H)
#Mag_of_H = 20*cmath.log10(Y)
f = logspace(-1,0.001) # frequencies from 0 to 10**5
sys = signal.lti([H],f)
w, mag, phase = signal.bode(sys, n= f)
#print (w, mag, phase)
plt.plot(f, w, label= 'Frequency rad/sec')
plt.plot(f, mag, label= 'Magnitude [dB]' )
plt.plot(f, phase, label='Phase array [deg]' )
plt.grid(which='both', axis= 'both') 
plt.legend()       
#plt.xlabel('Real numbers R')
#plt.ylabel('Imaginary numbers I')
#plt.scatter(X,Y)


#plt.show()

#fig= plt.figure()
#ax = fig.add_subplot(projection = 'polar')
#c= ax.scatter(X,Y)
#plt.title('Polar representation of ')